// Debug detalhado do WhatsApp
import { supabase } from '../lib/supabase';

export const debugWhatsAppSetup = async (barbershopId: string) => {
  console.log('üîç INICIANDO DEBUG WHATSAPP...');
  console.log('Barbershop ID:', barbershopId);

  try {
    // 1. Verificar sess√£o WhatsApp
    console.log('\n1Ô∏è‚É£ Verificando sess√£o WhatsApp...');
    const { data: whatsappSession, error: sessionError } = await supabase
      .from('whatsapp_sessions')
      .select('*')
      .eq('barbershop_id', barbershopId)
      .single();

    if (sessionError) {
      console.error('‚ùå Erro ao buscar sess√£o:', sessionError);
      return { success: false, error: 'Sess√£o n√£o encontrada' };
    }

    if (!whatsappSession) {
      console.error('‚ùå Nenhuma sess√£o encontrada');
      return { success: false, error: 'WhatsApp n√£o configurado' };
    }

    console.log('‚úÖ Sess√£o encontrada:', {
      instance_token: whatsappSession.instance_token ? 'Presente' : 'Ausente',
      is_connected: whatsappSession.is_connected,
      phone_number: whatsappSession.phone_number
    });

    // 2. Verificar template
    console.log('\n2Ô∏è‚É£ Verificando template de confirma√ß√£o...');
    const { data: template, error: templateError } = await supabase
      .from('whatsapp_templates')
      .select('*')
      .eq('barbershop_id', barbershopId)
      .eq('template_type', 'appointment_confirmed')
      .eq('is_active', true)
      .single();

    if (templateError) {
      console.error('‚ùå Erro ao buscar template:', templateError);
      return { success: false, error: 'Template n√£o encontrado' };
    }

    if (!template) {
      console.error('‚ùå Nenhum template ativo encontrado');
      return { success: false, error: 'Template de confirma√ß√£o n√£o configurado' };
    }

    console.log('‚úÖ Template encontrado:', {
      name: template.name,
      preview: template.message.substring(0, 100) + '...'
    });

    // 3. Testar API WhatsApp
    console.log('\n3Ô∏è‚É£ Testando conex√£o com API WhatsApp...');
    try {
      const response = await fetch('https://hairfycombr.uazapi.com/status', {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'token': whatsappSession.instance_token
        }
      });

      const result = await response.json();
      console.log('üì° Status da API:', result);

      if (response.ok) {
        console.log('‚úÖ API WhatsApp respondendo');
      } else {
        console.error('‚ùå API WhatsApp com erro:', result);
        return { success: false, error: 'API WhatsApp n√£o est√° respondendo' };
      }
    } catch (apiError) {
      console.error('‚ùå Erro ao conectar com API:', apiError);
      return { success: false, error: 'Erro de conex√£o com API' };
    }

    // 4. Verificar √∫ltimas mensagens na fila
    console.log('\n4Ô∏è‚É£ Verificando fila de mensagens...');
    const { data: messageQueue, error: queueError } = await supabase
      .from('whatsapp_message_queue')
      .select('*')
      .eq('barbershop_id', barbershopId)
      .order('created_at', { ascending: false })
      .limit(5);

    if (queueError) {
      console.error('‚ùå Erro ao buscar fila:', queueError);
    } else {
      console.log('üìã √öltimas mensagens na fila:', messageQueue);
    }

    console.log('\n‚úÖ DEBUG CONCLU√çDO - Tudo configurado corretamente!');
    return { 
      success: true, 
      session: whatsappSession, 
      template: template,
      messageQueue: messageQueue 
    };

  } catch (error) {
    console.error('‚ùå Erro geral no debug:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Erro desconhecido' };
  }
};

export const testWhatsAppMessage = async (
  barbershopId: string, 
  phoneNumber: string, 
  testMessage: string = 'Teste de mensagem do sistema'
) => {
  console.log('üß™ TESTANDO ENVIO DE MENSAGEM...');
  
  try {
    // Buscar token
    const { data: session } = await supabase
      .from('whatsapp_sessions')
      .select('instance_token')
      .eq('barbershop_id', barbershopId)
      .single();

    if (!session?.instance_token) {
      throw new Error('Token n√£o encontrado');
    }

    // Preparar n√∫mero
    const cleanNumber = phoneNumber.replace(/\D/g, '');
    const finalNumber = cleanNumber.startsWith('55') ? cleanNumber : `55${cleanNumber}`;

    console.log('üì± Enviando para:', finalNumber);

    // Enviar mensagem
    const response = await fetch('https://hairfycombr.uazapi.com/send/text', {
      method: 'POST',
      mode: 'cors',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'token': session.instance_token
      },
      body: JSON.stringify({
        number: finalNumber,
        text: testMessage
      })
    });

    const result = await response.json();
    console.log('üì§ Resposta do teste:', result);

    return { success: response.ok, result };

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Erro desconhecido' };
  }
};